0xda8438ac
0000000000000000000000000000000000000000000000000000000000000005
0000000000000000000000000000000000000000000000000000000000000060
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000050
68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066
732f516d564a4746354d73476b59426544634c78474553534e36653559506258
346f466f4d6936487a356f4b3461526900000000000000000000000000000000


====================================mint start==========================================
 ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',//用户自己的钱包地址
      to: '0x7def6961f3c752c83ecf3947deb5c71d65f33426',//Pixel合约地址
       data:'0x095ea7b3000000000000000000000000a770814c47f42c86ae52f33428dc9a042429e5d9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
    },//a770814c47f42c86ae52f33428dc9a042429e5d9为创建NFT合约地址  方法approve("0xa770814c47f42c86ae52f33428dc9a042429e5d9",-1)
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);



ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',//用户自己的钱包地址
      to: '0xa770814c47f42c86ae52f33428dc9a042429e5d9',//创建NFT合约地址
      data:'0xfb8e04c800000000000000000000000041fea2d4efef108f6495b311dad5e2b21c23b4ee00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000022222000000000000000000000000000000000000000000000000000000000000'
      //data的参数 mint("0x41fea2d4efef108f6495b311dad5e2b21c23b4ee",'""',0,200,200,10,10)
      //参考 http://cw.hubwiz.com/card/c/web3.js-1.0/1/7/6/        http://www.jouypub.com/2018/1292c65cfbe128f290fb336d930d3bca/
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);

====================================mint end==========================================






setTokenURI(uint256 tokenId, string memory tokenURI, bool blur)


 ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',
      to: '0xa770814c47f42c86ae52f33428dc9a042429e5d9',
data:'0xfb8e04c800000000000000000000000041fea2d4efef108f6495b311dad5e2b21c23b4ee00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000022222000000000000000000000000000000000000000000000000000000000000'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);








====================================readyToSellToken start==========================================

NFTContract.approve(bidContract,tokenId)

Function: approve(address to, uint256 tokenId)

0x095ea7b3
0000000000000000000000003573846c388e009ac8d5e89edf2523efa6f04d3f
0000000000000000000000000000000000000000000000000000000000000002

 ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',
      to: '0xa770814c47f42c86ae52f33428dc9a042429e5d9',
data:'0x095ea7b30000000000000000000000003573846c388e009ac8d5e89edf2523efa6f04d3f0000000000000000000000000000000000000000000000000000000000000002'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);



0xa7222b1d61facf5fe59c07363fef4345b537f1a9
readyToSellToken(uint256 _tokenId, uint256 _price)

0x523a57cf
0000000000000000000000000000000000000000000000000000000000000002
0000000000000000000000000000000000000000000000006bc75e2d63100000


 ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',
      to: '0x3573846c388e009ac8d5e89edf2523efa6f04d3f',
data:'0x523a57cf00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000006bc75e2d63100000'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);


===================================readyToSellToken end=============================================


====================================CancelSellToken start===========================================

取消卖单 方法: cancelSellToken(uint256 _tokenId)
methodId = 0xb84eb76a

0xb84eb76a
0000000000000000000000000000000000000000000000000000000000000002


 ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',
      to: '0x3573846c388e009ac8d5e89edf2523efa6f04d3f',
data:'0xb84eb76a0000000000000000000000000000000000000000000000000000000000000002'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);


====================================CancelSellToken end=============================================


====================================buyToken start==================================================

Function: approve(address spender, uint256 amount)

MethodID: 0x095ea7b3
[0]:  0000000000000000000000003573846c388e009ac8d5e89edf2523efa6f04d3f //BidNFT
[1]:  ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

0x095ea7b30000000000000000000000003573846c388e009ac8d5e89edf2523efa6f04d3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0xf72aa81038ce6170ae5041058597fd98af7ced44',
      to: '0x668de74b03a5b5a370ca189192bb8c63e386bdd4',//DAI
data:'0x095ea7b30000000000000000000000003573846c388e009ac8d5e89edf2523efa6f04d3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);






Function: buyToken(uint256 _tokenId) ***

MethodID: 0x2d296bf1
[0]:  0000000000000000000000000000000000000000000000000000000000000004


0x2d296bf1
0000000000000000000000000000000000000000000000000000000000000004


 ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0xf72aa81038ce6170ae5041058597fd98af7ced44',
      to: '0x3573846c388e009ac8d5e89edf2523efa6f04d3f',//BidNFT
data:'0x2d296bf10000000000000000000000000000000000000000000000000000000000000004'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);




====================================buyToken end====================================================





//get pixel
====================================Get Pixel by DAI start==========================================
Dai合约方法：
Function: approve(address usr, uint256 wad)

MethodID: 0x095ea7b3
[0]:  0000000000000000000000007def6961f3c752c83ecf3947deb5c71d65f33426
[1]:  ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

0x095ea7b30000000000000000000000007def6961f3c752c83ecf3947deb5c71d65f33426ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

//0x7def6961f3c752c83ecf3947deb5c71d65f33426  //Pixel合约地址

ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',//钱包地址
      to: '0x668de74b03a5b5a370ca189192bb8c63e386bdd4',//DAI 合约地址
data:'0x095ea7b30000000000000000000000007def6961f3c752c83ecf3947deb5c71d65f33426ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);




Pixel合约方法：
Function: purchase(uint256 amount) ***

MethodID: 0xefef39a1
[0]:  0000000000000000000000000000000000000000000000000000000000000064

0xefef39a10000000000000000000000000000000000000000000000000000000000000064

ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',
      to: '0x7def6961f3c752c83ecf3947deb5c71d65f33426',//Pixel合约地址
data:'0xefef39a10000000000000000000000000000000000000000000000000000000000000064'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);


====================================Get Pixel by DAI end============================================




====================================Get Pixel totalRemaining start==================================


ethereum.request({
  method: 'eth_call',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',
      to: '0x7def6961f3c752c83ecf3947deb5c71d65f33426',//Pixel合约地址
      data:'0xd8a54360'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);



====================================Get Pixel totalRemaining end==================================



====================================check dai approve start==========================================
{
        "inputs":[
            {
                "internalType":"address",
                "name":"owner",
                "type":"address"
            },
            {
                "internalType":"address",
                "name":"spender",
                "type":"address"
            }
        ],
        "name":"allowance",
        "outputs":[
            {
                "internalType":"uint256",
                "name":"",
                "type":"uint256"
            }
        ],
        "stateMutability":"view",
        "type":"function"
    }



ethereum.request({
  method: 'eth_call',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',
      to: '0x668de74b03a5b5a370ca189192bb8c63e386bdd4',//dai合约地址
      data:'0xdd62ed3e00000000000000000000000041fea2d4efef108f6495b311dad5e2b21c23b4ee0000000000000000000000007def6961f3c752c83ecf3947deb5c71d65f33426'
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);


====================================check dai approve end===========================================



==================================== new mint start==========================================

ethereum.request({
  method: 'eth_sendTransaction',
  params: [
    {
      from: '0x41fea2d4efef108f6495b311dad5e2b21c23b4ee',//用户自己的钱包地址
      to: '0xd13c6eaa1fb05b41046c886db46a0131c05f9b68',//创建NFT合约地址
      value:'0x5af3107a4000',//0.0001ETH
      data:'0xfb8e04c800000000000000000000000041fea2d4efef108f6495b311dad5e2b21c23b4ee00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000022222000000000000000000000000000000000000000000000000000000000000'
      //data的参数 mint("0x41fea2d4efef108f6495b311dad5e2b21c23b4ee",'""',200,200,10,10)
      //参考 http://cw.hubwiz.com/card/c/web3.js-1.0/1/7/6/        http://www.jouypub.com/2018/1292c65cfbe128f290fb336d930d3bca/
    },
  ],
})
.then((txHash) => console.log(txHash))
.catch((error) => console.error);

====================================mint end==========================================






+ Pixel合约地址

0x7def6961f3c752c83ecf3947deb5c71d65f33426  //0xb59efd0f19fb9e9cb32d3e84bebec5ca4144c95e

+ Canvas合约地址

//0xcd5a398f67b95670caf38f58078719419ab9ee0e

+ 创建NFT合约地址（LibertyNFT）

0xd13c6eaa1fb05b41046c886db46a0131c05f9b68      //0xa770814c47f42c86ae52f33428dc9a042429e5d9    //0x8a78d7013703d45947d6710449825697677b0342

+ BidNFT

0xc81c4ed318ccc96c3ade6d27c02bf647ddd5e1fb     //0x3573846c388e009ac8d5e89edf2523efa6f04d3f   //0xa7222b1d61facf5fe59c07363fef4345b537f1a9

+ 空投合约地址

？

+ 购买Pixel合约地址

？

+ 旷池合约地址

？

+ DAI合约地址

0x7de10783fd90e9351aff82dcf3ef2538139536ae    //0x668de74b03a5b5a370ca189192bb8c63e386bdd4   //0x01d72303e276bc4535519af73c1be4d51656c1c4











